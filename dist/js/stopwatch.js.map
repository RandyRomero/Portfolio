{"version":3,"sources":["../../js/stopwatch.js"],"names":["clock_on_page","document","querySelector","start","pause","reset","zero","Date","setHours","time_delta","start_time","saved_time","start_watch","actual_time","watch_on","colors_button","body","buttons","querySelectorAll","one_color","opposite_color","time_formatter","number","print_time","textContent","getHours","getMinutes","getSeconds","update_time","getTime","start_stopwatch","setInterval","pause_stopwatch","clearInterval","reset_stopwatch","random_hex_number","Math","floor","random","toString","invert_buttons_colors","btn","style","borderColor","color","backgroundColor","get_colors_back","change_color","i","length","addEventListener","bind"],"mappings":"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","file":"stopwatch.js","sourcesContent":["let clock_on_page = document.querySelector('h1');\r\nlet start = document.querySelector('#start');\r\nlet pause = document.querySelector('#pause');\r\nlet reset = document.querySelector('#reset');\r\nlet zero = new Date().setHours(0, 0, 0, 0);\r\nlet time_delta = 0;\r\nlet start_time; /* Time when stopwatch will be turned on */\r\nlet saved_time = new Date(zero); /* Buffer to save actual time when stopwatch is paused */\r\nlet start_watch; /* Function with seInterval inside to update stopwatch */\r\nlet actual_time = new Date();\r\nlet watch_on = false; /* to prevent stating another instance of setInterval */\r\nlet colors_button = document.querySelector('#colors'); /* button to change colors of page */\r\nlet body = document.querySelector('body');\r\nlet buttons = document.querySelectorAll('button'); /* All buttons on page */\r\nlet one_color; /* New color for page background and button background */\r\nlet opposite_color; /* Opposite color for everything else: text, borders of buttons */\r\n\r\nfunction time_formatter(number) {\r\n    /* add leading zero if necessary */\r\n    if (number < 10) {\r\n        return '0' + number;\r\n    }\r\n    return number;\r\n}\r\n\r\nfunction print_time() {\r\n    /* update time on page */\r\n    clock_on_page.textContent = (time_formatter(actual_time.getHours()) + ':'\r\n        + time_formatter(actual_time.getMinutes()) + ':' + time_formatter(actual_time.getSeconds()));\r\n}\r\n\r\nfunction update_time() {\r\n    /* Counter of stopwatch */\r\n    time_delta = (new Date() - start_time) + saved_time.getTime(); // How much time passed since stopwatch has started\r\n    actual_time = new Date(time_delta); // Timestamp to Date object\r\n    print_time();\r\n}\r\n\r\nfunction start_stopwatch() {\r\n    start_time = new Date(); /* Start count from now */\r\n    if (!watch_on) { /* Start stopwatch only if it was switched off */\r\n        start_watch = setInterval(update_time, 100);\r\n        watch_on = true;\r\n    }\r\n}\r\n\r\nfunction pause_stopwatch() {\r\n    clearInterval(start_watch);\r\n    watch_on = false;\r\n    /* Save actual time in order to when user resumes stopwatch, start it from zero and add last actual time\r\n    before print*/\r\n    saved_time = actual_time;\r\n}\r\n\r\nfunction reset_stopwatch() {\r\n    clearInterval(start_watch);\r\n    watch_on = false;\r\n    actual_time = new Date(zero); /* Reset stopwatch time */\r\n    saved_time = new Date(zero); /* Reset time buffer */\r\n    print_time();\r\n}\r\n\r\nfunction random_hex_number() {\r\n    /* Get random decimal number and covert it to hexadecimal */\r\n    return '#' + (Math.floor(Math.random() * 16777215 + 1)).toString(16);\r\n}\r\n\r\nfunction invert_buttons_colors(btn) {\r\n    /* Invert buttons in active state (only when mouse pointer is pressed down on specific button. */\r\n    /* It's like css rule for button:active. */\r\n    buttons[btn].style.borderColor = one_color;\r\n    buttons[btn].style.color = one_color;\r\n    buttons[btn].style.backgroundColor = opposite_color;\r\n}\r\n\r\nfunction get_colors_back(btn) {\r\n    /* Return colors back when button is not active anymore. */\r\n    buttons[btn].style.borderColor = opposite_color;\r\n    buttons[btn].style.color = opposite_color;\r\n    buttons[btn].style.backgroundColor = one_color;\r\n}\r\n\r\nfunction change_color() { /* Change colors of whole page */\r\n    /* Get two random colors */\r\n    one_color = random_hex_number();\r\n    opposite_color = random_hex_number();\r\n    /* Apply them to background of body and to stopwatch numbers */\r\n    body.style.backgroundColor = one_color;\r\n    clock_on_page.style.color = opposite_color;\r\n    /* Apply color to buttons */\r\n    for (let i = 0; i < buttons.length; i++) {\r\n        buttons[i].style.borderColor = opposite_color;\r\n        buttons[i].style.color = opposite_color;\r\n        buttons[i].style.backgroundColor = one_color;\r\n    }\r\n\r\n    for (let i = 0; i < buttons.length; i++) {\r\n        /* Invert colors of buttons when button is pressed */\r\n        buttons[i].addEventListener('mousedown', invert_buttons_colors.bind(null, i));\r\n        /* Get colors back when button is not pressed anymore */\r\n        buttons[i].addEventListener('mouseup', get_colors_back.bind(null, i));\r\n        /* Get colors back even if mouse leave the button otherwise it will stay with inversed colors */\r\n        buttons[i].addEventListener('mouseleave', get_colors_back.bind(null, i));\r\n    }\r\n}\r\n\r\nstart.addEventListener('click', start_stopwatch);\r\npause.addEventListener('click', pause_stopwatch);\r\nreset.addEventListener('click', reset_stopwatch);\r\ncolors_button.addEventListener('click', change_color);"]}